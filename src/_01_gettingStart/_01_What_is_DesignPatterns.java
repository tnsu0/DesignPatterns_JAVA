package _01_gettingStart;

public class _01_What_is_DesignPatterns {
    // 성공적인 소프트웨어를 만드는 여정.성공적인 소프트웨어를 만드는 과정에서 여러 엔지니어가
    // 메모리 누수, 객체 생성, 클래스 구조, 구성 요소 통신, 시스템 배선 등과 관련하여 일반적으로 발생하는 설계 문제에 직면했습니다

    // 그들은 이러한 문제와 다른 엔지니어 이점에 대한 해결책을 설계 패턴으로 문서화했습니다.

    //  디자인 패턴이란 무엇입니까.
    //  소프트웨어 공학에서 디자인 패턴은 소프트웨어 설계에서 흔히 발생하는 문제에 대한 일반적인 반복 가능한 해결책입니다.
    //  설계 패턴은 숙련된 객체 지향 소프트웨어 개발자가 채택한 모범 사례 중 일부를 나타내는 데 사용됩니다.

    // 디자인 패턴의 이점

    // 디자인 패턴은 특정 문제를 해결하는 데 사용할 수 있는 도구이며, 이미 누군가가 문제를 해결했을 가능성이 높습니다.
    // 요구사항이 끊임없이 변화하는 소프트웨어를 여러 동시 사용자가 프로덕션에서 사용할 경우
    // 성능, 확장성, 안정성, 유지보수성에 대한 실제 문제가 발생합니다.
    // 디자인 패턴은 우리가 이러한 나쁜 놀라움을 피할 수 있게 해줍니다

    // 객체 지향 기술을 향상시킵니다.
    // 추상 상속, 다형성 및 캡슐화와 같은 OPS 기본 사항은 올바르게 사용되지 않으면
    // 코드 중복, 취약한 설계, 클래스 수 폭발과 같은 문제로 이어집니다.
    // 디자인 패턴의 기초에서는 객체 지향 기본을 넘어서는 또 다른 디자인 원칙을 발견할 수 있습니다.
    // 이러한 추가적인 원칙들과 그것들이 어떻게 디자인 패턴에 통합되는지를 알면,
    // 당신은 더 나은 객체 지향 프로그래머가 될 것입니다.
    // 라이브러리 및 언어의 패턴을 인식합니다.

    // SOLID 코드가 DRY인지 WET인지 확인합니다.
    // DRY, 자신을 반복하지 않는 것은 소프트웨어 개발 원칙이며,
    // 코드 반복을 줄이는 것이 주된 목적입니다.
    // WET, write every time은 반대를 의미하는 건방진 줄임말입니다.
    // 즉, DRY 원칙을 따르지 않는 코드는 WET 코드입니다.

    // 사이클로매틱 복잡성, 타이트 커플링, 루즈 커플링이 무엇인지
    // 모든 문제를 해결할 수 있는 디자인 패턴을 살펴볼 것입니다.

    // 우리는 코드의 복잡성을 줄이기 위해 가능한 한 직선으로 만들려고 노력합니다.
    // 긴밀한 결합은 무엇인가. 긴밀한 결합은 클래스 그룹이 서로에 대한 의존도가 높은 경우입니다.
    // 이 시나리오는 클래스가 독립적으로 설계되지 않고
    // 너무 많은 책임을 떠맡을 때 또는 하나의 관심사가 고유한 클래스를 갖는 것보다 여러 클래스에 분산될 때 발생합니다.
    // 클래스 간의 긴밀한 결합은 하나의 클래스가 체인될 때 다른 많은 클래스에 영향을 미치는 리플 효과를 생성합니다.
    // 한 클래스의 사소한 변경은 많은 다른 클래스를 수정하고 컴파일해야 합니다.
    // 느슨한 결합이란 무엇입니까.
    // 느슨한 결합은 단일 책임과 분리를 촉진하는 설계를 통해 달성됩니다.
}
